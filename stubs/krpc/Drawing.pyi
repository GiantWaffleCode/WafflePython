from krpc.SpaceCenter import SpaceCenter
from krpc.UI import UI


class Drawing:
    class Line:
        @property
        def start(self) -> tuple[float, float, float]: ...

        @start.setter
        def start(self, this: Drawing.Line, value: tuple[float, float, float]): ...

        @property
        def end(self) -> tuple[float, float, float]: ...

        @end.setter
        def end(self, this: Drawing.Line, value: tuple[float, float, float]): ...

        @property
        def color(self) -> tuple[float, float, float]: ...

        @color.setter
        def color(self, this: Drawing.Line, value: tuple[float, float, float]): ...

        @property
        def thickness(self) -> float: ...

        @thickness.setter
        def thickness(self, this: Drawing.Line, value: float): ...

        @property
        def reference_frame(self) -> SpaceCenter.ReferenceFrame: ...

        @reference_frame.setter
        def reference_frame(self, this: Drawing.Line, value: SpaceCenter.ReferenceFrame): ...

        @property
        def visible(self) -> bool: ...

        @visible.setter
        def visible(self, this: Drawing.Line, value: bool): ...

        @property
        def material(self) -> str: ...

        @material.setter
        def material(self, this: Drawing.Line, value: str): ...

        def remove(self): ...

    
    class Polygon:
        @property
        def vertices(self) -> list[tuple[float, float, float]]: ...

        @vertices.setter
        def vertices(self, this: Drawing.Polygon, value: list[tuple[float, float, float]]): ...

        @property
        def color(self) -> tuple[float, float, float]: ...

        @color.setter
        def color(self, this: Drawing.Polygon, value: tuple[float, float, float]): ...

        @property
        def thickness(self) -> float: ...

        @thickness.setter
        def thickness(self, this: Drawing.Polygon, value: float): ...

        @property
        def reference_frame(self) -> SpaceCenter.ReferenceFrame: ...

        @reference_frame.setter
        def reference_frame(self, this: Drawing.Polygon, value: SpaceCenter.ReferenceFrame): ...

        @property
        def visible(self) -> bool: ...

        @visible.setter
        def visible(self, this: Drawing.Polygon, value: bool): ...

        @property
        def material(self) -> str: ...

        @material.setter
        def material(self, this: Drawing.Polygon, value: str): ...

        def remove(self): ...

    
    class Text:
        @property
        def position(self) -> tuple[float, float, float]: ...

        @position.setter
        def position(self, this: Drawing.Text, value: tuple[float, float, float]): ...

        @property
        def rotation(self) -> tuple[float, float, float, float]: ...

        @rotation.setter
        def rotation(self, this: Drawing.Text, value: tuple[float, float, float, float]): ...

        @property
        def content(self) -> str: ...

        @content.setter
        def content(self, this: Drawing.Text, value: str): ...

        @property
        def font(self) -> str: ...

        @font.setter
        def font(self, this: Drawing.Text, value: str): ...

        @property
        def size(self) -> int: ...

        @size.setter
        def size(self, this: Drawing.Text, value: int): ...

        @property
        def character_size(self) -> float: ...

        @character_size.setter
        def character_size(self, this: Drawing.Text, value: float): ...

        @property
        def style(self) -> UI.FontStyle: ...

        @style.setter
        def style(self, this: Drawing.Text, value: UI.FontStyle): ...

        @property
        def alignment(self) -> UI.TextAlignment: ...

        @alignment.setter
        def alignment(self, this: Drawing.Text, value: UI.TextAlignment): ...

        @property
        def line_spacing(self) -> float: ...

        @line_spacing.setter
        def line_spacing(self, this: Drawing.Text, value: float): ...

        @property
        def anchor(self) -> UI.TextAnchor: ...

        @anchor.setter
        def anchor(self, this: Drawing.Text, value: UI.TextAnchor): ...

        @property
        def color(self) -> tuple[float, float, float]: ...

        @color.setter
        def color(self, this: Drawing.Text, value: tuple[float, float, float]): ...

        @property
        def reference_frame(self) -> SpaceCenter.ReferenceFrame: ...

        @reference_frame.setter
        def reference_frame(self, this: Drawing.Text, value: SpaceCenter.ReferenceFrame): ...

        @property
        def visible(self) -> bool: ...

        @visible.setter
        def visible(self, this: Drawing.Text, value: bool): ...

        @property
        def material(self) -> str: ...

        @material.setter
        def material(self, this: Drawing.Text, value: str): ...

        @staticmethod
        def available_fonts() -> list[str]: ...

        def remove(self): ...

    
    def add_line(self, start: tuple[float, float, float], end: tuple[float, float, float], reference_frame: SpaceCenter.ReferenceFrame, visible: bool = True) -> Drawing.Line: ...

    def add_direction(self, direction: tuple[float, float, float], reference_frame: SpaceCenter.ReferenceFrame, length: float = 10, visible: bool = True) -> Drawing.Line: ...

    def add_direction_from_com(self, direction: tuple[float, float, float], reference_frame: SpaceCenter.ReferenceFrame, length: float = 10, visible: bool = True) -> Drawing.Line: ...

    def add_polygon(self, vertices: list[tuple[float, float, float]], reference_frame: SpaceCenter.ReferenceFrame, visible: bool = True) -> Drawing.Polygon: ...

    def add_text(self, text: str, reference_frame: SpaceCenter.ReferenceFrame, position: tuple[float, float, float], rotation: tuple[float, float, float, float], visible: bool = True) -> Drawing.Text: ...

    def clear(self, client_only: bool = False): ...


