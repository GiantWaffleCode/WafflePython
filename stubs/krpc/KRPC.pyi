from typing import Callable

from krpc.event import Event

from krpc.stream import Stream

from krpc.types import Status


class KRPC:
    class GameScene:
        space_center = 0
        flight = 1
        tracking_station = 2
        editor_vab = 3
        editor_sph = 4
    
    class Expression:
        @staticmethod
        def constant_double(value: float) -> KRPC.Expression: ...

        @staticmethod
        def constant_float(value: float) -> KRPC.Expression: ...

        @staticmethod
        def constant_int(value: int) -> KRPC.Expression: ...

        @staticmethod
        def constant_bool(value: bool) -> KRPC.Expression: ...

        @staticmethod
        def constant_string(value: str) -> KRPC.Expression: ...

        @staticmethod
        def call(call: Callable) -> KRPC.Expression: ...

        @staticmethod
        def equal(arg0: KRPC.Expression, arg1: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def not_equal(arg0: KRPC.Expression, arg1: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def greater_than(arg0: KRPC.Expression, arg1: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def greater_than_or_equal(arg0: KRPC.Expression, arg1: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def less_than(arg0: KRPC.Expression, arg1: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def less_than_or_equal(arg0: KRPC.Expression, arg1: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def and(arg0: KRPC.Expression, arg1: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def or(arg0: KRPC.Expression, arg1: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def exclusive_or(arg0: KRPC.Expression, arg1: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def not(arg: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def add(arg0: KRPC.Expression, arg1: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def subtract(arg0: KRPC.Expression, arg1: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def multiply(arg0: KRPC.Expression, arg1: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def divide(arg0: KRPC.Expression, arg1: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def modulo(arg0: KRPC.Expression, arg1: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def power(arg0: KRPC.Expression, arg1: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def left_shift(arg0: KRPC.Expression, arg1: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def right_shift(arg0: KRPC.Expression, arg1: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def cast(arg: KRPC.Expression, type: KRPC.Type) -> KRPC.Expression: ...

        @staticmethod
        def parameter(name: str, type: KRPC.Type) -> KRPC.Expression: ...

        @staticmethod
        def function(parameters: list[KRPC.Expression], body: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def invoke(function: KRPC.Expression, args: dict[str, KRPC.Expression]) -> KRPC.Expression: ...

        @staticmethod
        def create_tuple(elements: list[KRPC.Expression]) -> KRPC.Expression: ...

        @staticmethod
        def create_list(values: list[KRPC.Expression]) -> KRPC.Expression: ...

        @staticmethod
        def create_set(values: set[KRPC.Expression]) -> KRPC.Expression: ...

        @staticmethod
        def create_dictionary(keys: list[KRPC.Expression], values: list[KRPC.Expression]) -> KRPC.Expression: ...

        @staticmethod
        def to_list(arg: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def to_set(arg: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def get(arg: KRPC.Expression, index: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def count(arg: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def sum(arg: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def max(arg: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def min(arg: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def average(arg: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def select(arg: KRPC.Expression, func: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def where(arg: KRPC.Expression, func: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def contains(arg: KRPC.Expression, value: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def aggregate(arg: KRPC.Expression, func: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def aggregate_with_seed(arg: KRPC.Expression, seed: KRPC.Expression, func: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def concat(arg1: KRPC.Expression, arg2: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def order_by(arg: KRPC.Expression, key: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def all(arg: KRPC.Expression, predicate: KRPC.Expression) -> KRPC.Expression: ...

        @staticmethod
        def any(arg: KRPC.Expression, predicate: KRPC.Expression) -> KRPC.Expression: ...

    
    class Type:
        @staticmethod
        def double() -> KRPC.Type: ...

        @staticmethod
        def float() -> KRPC.Type: ...

        @staticmethod
        def int() -> KRPC.Type: ...

        @staticmethod
        def bool() -> KRPC.Type: ...

        @staticmethod
        def string() -> KRPC.Type: ...

    
    @property
    def clients(self) -> list[tuple[bytearray, str, str]]: ...

    @property
    def current_game_scene(self) -> KRPC.GameScene: ...

    @property
    def paused(self) -> bool: ...

    @paused.setter
    def paused(self, value: bool): ...

    def get_client_id(self) -> bytearray: ...

    def get_client_name(self) -> str: ...

    def get_status(self) -> Status: ...

    def get_services(self): ...

    def add_stream(self, call: Callable, start: bool = True) -> Stream: ...

    def start_stream(self, id: int): ...

    def set_stream_rate(self, id: int, rate: float): ...

    def remove_stream(self, id: int): ...

    def add_event(self, expression: KRPC.Expression) -> Event: ...


