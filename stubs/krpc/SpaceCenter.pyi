
class SpaceCenter:
    class CameraMode:
        automatic = 0
        free = 1
        chase = 2
        locked = 3
        orbital = 4
        iva = 5
        map = 6
    
    class CommLinkType:
        home = 0
        control = 1
        relay = 2
    
    class ContractState:
        active = 0
        canceled = 1
        completed = 2
        deadline_expired = 3
        declined = 4
        failed = 5
        generated = 6
        offered = 7
        offer_expired = 8
        withdrawn = 9
    
    class ControlInputMode:
        additive = 0
        override = 1
    
    class ControlSource:
        kerbal = 0
        probe = 1
    
    class ControlState:
        full = 0
        partial = 1
    
    class CrewMemberType:
        applicant = 0
        crew = 1
        tourist = 2
        unowned = 3
    
    class GameMode:
        sandbox = 0
        career = 1
        science = 2
        science_sandbox = 3
        mission = 4
        mission_builder = 5
        scenario = 6
        scenario_non_resumable = 7
    
    class AntennaState:
        deployed = 0
        retracted = 1
        deploying = 2
        retracting = 3
        broken = 4
    
    class CargoBayState:
        open = 0
        closed = 1
        opening = 2
        closing = 3
    
    class DockingPortState:
        ready = 0
        docked = 1
        docking = 2
        undocking = 3
        shielded = 4
        moving = 5
    
    class LegState:
        deployed = 0
        retracted = 1
        deploying = 2
        retracting = 3
        broken = 4
    
    class MotorState:
        idle = 0
        running = 1
        disabled = 2
        inoperable = 3
        not_enough_resources = 4
    
    class ParachuteState:
        stowed = 0
        armed = 1
        active = 2
        semi_deployed = 3
        deployed = 4
        cut = 5
    
    class RadiatorState:
        extended = 0
        retracted = 1
        extending = 2
        retracting = 3
        broken = 4
    
    class ResourceConverterState:
        running = 0
        idle = 1
        missing_resource = 2
        storage_full = 3
        capacity = 4
        unknown = 5
    
    class ResourceHarvesterState:
        deploying = 0
        deployed = 1
        retracting = 2
        retracted = 3
        active = 4
    
    class SolarPanelState:
        extended = 0
        retracted = 1
        extending = 2
        retracting = 3
        broken = 4
    
    class WheelState:
        deployed = 0
        retracted = 1
        deploying = 2
        retracting = 3
        broken = 4
    
    class ResourceFlowMode:
        vessel = 0
        stage = 1
        adjacent = 2
    
    class SASMode:
        stability_assist = 0
        maneuver = 1
        prograde = 2
        retrograde = 3
        normal = 4
        anti_normal = 5
        radial = 6
        anti_radial = 7
        target = 8
        anti_target = 9
    
    class SpeedMode:
        orbit = 0
        surface = 1
        target = 2
    
    class VesselSituation:
        pre_launch = 0
        orbiting = 1
        sub_orbital = 2
        escaping = 3
        flying = 4
        landed = 5
        splashed = 6
        docked = 7
    
    class VesselType:
        base = 0
        debris = 1
        lander = 2
        plane = 3
        probe = 4
        relay = 5
        rover = 6
        ship = 7
        station = 8
    
    class WarpMode:
        rails = 0
        physics = 1
    
    class AutoPilot:
        @property
        def error(self) -> float: ...

        @property
        def pitch_error(self) -> float: ...

        @property
        def heading_error(self) -> float: ...

        @property
        def roll_error(self) -> float: ...

        @property
        def reference_frame(self) -> SpaceCenter.ReferenceFrame: ...

        @reference_frame.setter
        def reference_frame(self, this: SpaceCenter.AutoPilot, value: SpaceCenter.ReferenceFrame): ...

        @property
        def target_pitch(self) -> float: ...

        @target_pitch.setter
        def target_pitch(self, this: SpaceCenter.AutoPilot, value: float): ...

        @property
        def target_heading(self) -> float: ...

        @target_heading.setter
        def target_heading(self, this: SpaceCenter.AutoPilot, value: float): ...

        @property
        def target_roll(self) -> float: ...

        @target_roll.setter
        def target_roll(self, this: SpaceCenter.AutoPilot, value: float): ...

        @property
        def target_direction(self) -> tuple[float, float, float]: ...

        @target_direction.setter
        def target_direction(self, this: SpaceCenter.AutoPilot, value: tuple[float, float, float]): ...

        @property
        def sas(self) -> bool: ...

        @sas.setter
        def sas(self, this: SpaceCenter.AutoPilot, value: bool): ...

        @property
        def sas_mode(self) -> SpaceCenter.SASMode: ...

        @sas_mode.setter
        def sas_mode(self, this: SpaceCenter.AutoPilot, value: SpaceCenter.SASMode): ...

        @property
        def roll_threshold(self) -> float: ...

        @roll_threshold.setter
        def roll_threshold(self, this: SpaceCenter.AutoPilot, value: float): ...

        @property
        def stopping_time(self) -> tuple[float, float, float]: ...

        @stopping_time.setter
        def stopping_time(self, this: SpaceCenter.AutoPilot, value: tuple[float, float, float]): ...

        @property
        def deceleration_time(self) -> tuple[float, float, float]: ...

        @deceleration_time.setter
        def deceleration_time(self, this: SpaceCenter.AutoPilot, value: tuple[float, float, float]): ...

        @property
        def attenuation_angle(self) -> tuple[float, float, float]: ...

        @attenuation_angle.setter
        def attenuation_angle(self, this: SpaceCenter.AutoPilot, value: tuple[float, float, float]): ...

        @property
        def auto_tune(self) -> bool: ...

        @auto_tune.setter
        def auto_tune(self, this: SpaceCenter.AutoPilot, value: bool): ...

        @property
        def time_to_peak(self) -> tuple[float, float, float]: ...

        @time_to_peak.setter
        def time_to_peak(self, this: SpaceCenter.AutoPilot, value: tuple[float, float, float]): ...

        @property
        def overshoot(self) -> tuple[float, float, float]: ...

        @overshoot.setter
        def overshoot(self, this: SpaceCenter.AutoPilot, value: tuple[float, float, float]): ...

        @property
        def pitch_pid_gains(self) -> tuple[float, float, float]: ...

        @pitch_pid_gains.setter
        def pitch_pid_gains(self, this: SpaceCenter.AutoPilot, value: tuple[float, float, float]): ...

        @property
        def roll_pid_gains(self) -> tuple[float, float, float]: ...

        @roll_pid_gains.setter
        def roll_pid_gains(self, this: SpaceCenter.AutoPilot, value: tuple[float, float, float]): ...

        @property
        def yaw_pid_gains(self) -> tuple[float, float, float]: ...

        @yaw_pid_gains.setter
        def yaw_pid_gains(self, this: SpaceCenter.AutoPilot, value: tuple[float, float, float]): ...

        def engage(self): ...

        def disengage(self): ...

        def wait(self): ...

        def target_pitch_and_heading(self, pitch: float, heading: float): ...

    
    class Camera:
        @property
        def mode(self) -> SpaceCenter.CameraMode: ...

        @mode.setter
        def mode(self, this: SpaceCenter.Camera, value: SpaceCenter.CameraMode): ...

        @property
        def pitch(self) -> float: ...

        @pitch.setter
        def pitch(self, this: SpaceCenter.Camera, value: float): ...

        @property
        def heading(self) -> float: ...

        @heading.setter
        def heading(self, this: SpaceCenter.Camera, value: float): ...

        @property
        def distance(self) -> float: ...

        @distance.setter
        def distance(self, this: SpaceCenter.Camera, value: float): ...

        @property
        def min_pitch(self) -> float: ...

        @property
        def max_pitch(self) -> float: ...

        @property
        def min_distance(self) -> float: ...

        @property
        def max_distance(self) -> float: ...

        @property
        def default_distance(self) -> float: ...

        @property
        def focussed_body(self) -> SpaceCenter.CelestialBody: ...

        @focussed_body.setter
        def focussed_body(self, this: SpaceCenter.Camera, value: SpaceCenter.CelestialBody): ...

        @property
        def focussed_vessel(self) -> SpaceCenter.Vessel: ...

        @focussed_vessel.setter
        def focussed_vessel(self, this: SpaceCenter.Camera, value: SpaceCenter.Vessel): ...

        @property
        def focussed_node(self) -> SpaceCenter.Node: ...

        @focussed_node.setter
        def focussed_node(self, this: SpaceCenter.Camera, value: SpaceCenter.Node): ...

    
    class CelestialBody:
        @property
        def name(self) -> str: ...

        @property
        def satellites(self) -> list[SpaceCenter.CelestialBody]: ...

        @property
        def mass(self) -> float: ...

        @property
        def gravitational_parameter(self) -> float: ...

        @property
        def surface_gravity(self) -> float: ...

        @property
        def rotational_period(self) -> float: ...

        @property
        def rotational_speed(self) -> float: ...

        @property
        def rotation_angle(self) -> float: ...

        @property
        def initial_rotation(self) -> float: ...

        @property
        def equatorial_radius(self) -> float: ...

        @property
        def sphere_of_influence(self) -> float: ...

        @property
        def orbit(self) -> SpaceCenter.Orbit: ...

        @property
        def has_atmosphere(self) -> bool: ...

        @property
        def atmosphere_depth(self) -> float: ...

        @property
        def has_atmospheric_oxygen(self) -> bool: ...

        @property
        def biomes(self) -> set[str]: ...

        @property
        def flying_high_altitude_threshold(self) -> float: ...

        @property
        def space_high_altitude_threshold(self) -> float: ...

        @property
        def reference_frame(self) -> SpaceCenter.ReferenceFrame: ...

        @property
        def non_rotating_reference_frame(self) -> SpaceCenter.ReferenceFrame: ...

        @property
        def orbital_reference_frame(self) -> SpaceCenter.ReferenceFrame: ...

        def surface_height(self, latitude: float, longitude: float) -> float: ...

        def bedrock_height(self, latitude: float, longitude: float) -> float: ...

        def msl_position(self, latitude: float, longitude: float, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

        def surface_position(self, latitude: float, longitude: float, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

        def bedrock_position(self, latitude: float, longitude: float, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

        def position_at_altitude(self, latitude: float, longitude: float, altitude: float, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

        def latitude_at_position(self, position: tuple[float, float, float], reference_frame: SpaceCenter.ReferenceFrame) -> float: ...

        def longitude_at_position(self, position: tuple[float, float, float], reference_frame: SpaceCenter.ReferenceFrame) -> float: ...

        def altitude_at_position(self, position: tuple[float, float, float], reference_frame: SpaceCenter.ReferenceFrame) -> float: ...

        def atmospheric_density_at_position(self, position: tuple[float, float, float], reference_frame: SpaceCenter.ReferenceFrame) -> float: ...

        def temperature_at(self, position: tuple[float, float, float], reference_frame: SpaceCenter.ReferenceFrame) -> float: ...

        def density_at(self, altitude: float) -> float: ...

        def pressure_at(self, altitude: float) -> float: ...

        def biome_at(self, latitude: float, longitude: float) -> str: ...

        def position(self, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

        def velocity(self, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

        def rotation(self, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float, float]: ...

        def direction(self, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

        def angular_velocity(self, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

    
    class CommLink:
        @property
        def type(self) -> SpaceCenter.CommLinkType: ...

        @property
        def signal_strength(self) -> float: ...

        @property
        def start(self) -> SpaceCenter.CommNode: ...

        @property
        def end(self) -> SpaceCenter.CommNode: ...

    
    class CommNode:
        @property
        def name(self) -> str: ...

        @property
        def is_home(self) -> bool: ...

        @property
        def is_control_point(self) -> bool: ...

        @property
        def is_vessel(self) -> bool: ...

        @property
        def vessel(self) -> SpaceCenter.Vessel: ...

    
    class Comms:
        @property
        def can_communicate(self) -> bool: ...

        @property
        def can_transmit_science(self) -> bool: ...

        @property
        def signal_strength(self) -> float: ...

        @property
        def signal_delay(self) -> float: ...

        @property
        def power(self) -> float: ...

        @property
        def control_path(self) -> list[SpaceCenter.CommLink]: ...

    
    class Contract:
        @property
        def type(self) -> str: ...

        @property
        def title(self) -> str: ...

        @property
        def description(self) -> str: ...

        @property
        def notes(self) -> str: ...

        @property
        def synopsis(self) -> str: ...

        @property
        def keywords(self) -> list[str]: ...

        @property
        def state(self) -> SpaceCenter.ContractState: ...

        @property
        def active(self) -> bool: ...

        @property
        def failed(self) -> bool: ...

        @property
        def seen(self) -> bool: ...

        @property
        def read(self) -> bool: ...

        @property
        def can_be_canceled(self) -> bool: ...

        @property
        def can_be_declined(self) -> bool: ...

        @property
        def can_be_failed(self) -> bool: ...

        @property
        def funds_advance(self) -> float: ...

        @property
        def funds_completion(self) -> float: ...

        @property
        def funds_failure(self) -> float: ...

        @property
        def reputation_completion(self) -> float: ...

        @property
        def reputation_failure(self) -> float: ...

        @property
        def science_completion(self) -> float: ...

        @property
        def parameters(self) -> list[SpaceCenter.ContractParameter]: ...

        def cancel(self): ...

        def accept(self): ...

        def decline(self): ...

    
    class ContractManager:
        @property
        def types(self) -> set[str]: ...

        @property
        def all_contracts(self) -> list[SpaceCenter.Contract]: ...

        @property
        def active_contracts(self) -> list[SpaceCenter.Contract]: ...

        @property
        def offered_contracts(self) -> list[SpaceCenter.Contract]: ...

        @property
        def completed_contracts(self) -> list[SpaceCenter.Contract]: ...

        @property
        def failed_contracts(self) -> list[SpaceCenter.Contract]: ...

    
    class ContractParameter:
        @property
        def title(self) -> str: ...

        @property
        def notes(self) -> str: ...

        @property
        def children(self) -> list[SpaceCenter.ContractParameter]: ...

        @property
        def completed(self) -> bool: ...

        @property
        def failed(self) -> bool: ...

        @property
        def optional(self) -> bool: ...

        @property
        def funds_completion(self) -> float: ...

        @property
        def funds_failure(self) -> float: ...

        @property
        def reputation_completion(self) -> float: ...

        @property
        def reputation_failure(self) -> float: ...

        @property
        def science_completion(self) -> float: ...

    
    class Control:
        @property
        def state(self) -> SpaceCenter.ControlState: ...

        @property
        def source(self) -> SpaceCenter.ControlSource: ...

        @property
        def sas(self) -> bool: ...

        @sas.setter
        def sas(self, this: SpaceCenter.Control, value: bool): ...

        @property
        def sas_mode(self) -> SpaceCenter.SASMode: ...

        @sas_mode.setter
        def sas_mode(self, this: SpaceCenter.Control, value: SpaceCenter.SASMode): ...

        @property
        def speed_mode(self) -> SpaceCenter.SpeedMode: ...

        @speed_mode.setter
        def speed_mode(self, this: SpaceCenter.Control, value: SpaceCenter.SpeedMode): ...

        @property
        def rcs(self) -> bool: ...

        @rcs.setter
        def rcs(self, this: SpaceCenter.Control, value: bool): ...

        @property
        def reaction_wheels(self) -> bool: ...

        @reaction_wheels.setter
        def reaction_wheels(self, this: SpaceCenter.Control, value: bool): ...

        @property
        def gear(self) -> bool: ...

        @gear.setter
        def gear(self, this: SpaceCenter.Control, value: bool): ...

        @property
        def legs(self) -> bool: ...

        @legs.setter
        def legs(self, this: SpaceCenter.Control, value: bool): ...

        @property
        def wheels(self) -> bool: ...

        @wheels.setter
        def wheels(self, this: SpaceCenter.Control, value: bool): ...

        @property
        def lights(self) -> bool: ...

        @lights.setter
        def lights(self, this: SpaceCenter.Control, value: bool): ...

        @property
        def brakes(self) -> bool: ...

        @brakes.setter
        def brakes(self, this: SpaceCenter.Control, value: bool): ...

        @property
        def antennas(self) -> bool: ...

        @antennas.setter
        def antennas(self, this: SpaceCenter.Control, value: bool): ...

        @property
        def cargo_bays(self) -> bool: ...

        @cargo_bays.setter
        def cargo_bays(self, this: SpaceCenter.Control, value: bool): ...

        @property
        def intakes(self) -> bool: ...

        @intakes.setter
        def intakes(self, this: SpaceCenter.Control, value: bool): ...

        @property
        def parachutes(self) -> bool: ...

        @parachutes.setter
        def parachutes(self, this: SpaceCenter.Control, value: bool): ...

        @property
        def radiators(self) -> bool: ...

        @radiators.setter
        def radiators(self, this: SpaceCenter.Control, value: bool): ...

        @property
        def resource_harvesters(self) -> bool: ...

        @resource_harvesters.setter
        def resource_harvesters(self, this: SpaceCenter.Control, value: bool): ...

        @property
        def resource_harvesters_active(self) -> bool: ...

        @resource_harvesters_active.setter
        def resource_harvesters_active(self, this: SpaceCenter.Control, value: bool): ...

        @property
        def solar_panels(self) -> bool: ...

        @solar_panels.setter
        def solar_panels(self, this: SpaceCenter.Control, value: bool): ...

        @property
        def abort(self) -> bool: ...

        @abort.setter
        def abort(self, this: SpaceCenter.Control, value: bool): ...

        @property
        def throttle(self) -> float: ...

        @throttle.setter
        def throttle(self, this: SpaceCenter.Control, value: float): ...

        @property
        def input_mode(self) -> SpaceCenter.ControlInputMode: ...

        @input_mode.setter
        def input_mode(self, this: SpaceCenter.Control, value: SpaceCenter.ControlInputMode): ...

        @property
        def pitch(self) -> float: ...

        @pitch.setter
        def pitch(self, this: SpaceCenter.Control, value: float): ...

        @property
        def yaw(self) -> float: ...

        @yaw.setter
        def yaw(self, this: SpaceCenter.Control, value: float): ...

        @property
        def roll(self) -> float: ...

        @roll.setter
        def roll(self, this: SpaceCenter.Control, value: float): ...

        @property
        def forward(self) -> float: ...

        @forward.setter
        def forward(self, this: SpaceCenter.Control, value: float): ...

        @property
        def up(self) -> float: ...

        @up.setter
        def up(self, this: SpaceCenter.Control, value: float): ...

        @property
        def right(self) -> float: ...

        @right.setter
        def right(self, this: SpaceCenter.Control, value: float): ...

        @property
        def wheel_throttle(self) -> float: ...

        @wheel_throttle.setter
        def wheel_throttle(self, this: SpaceCenter.Control, value: float): ...

        @property
        def wheel_steering(self) -> float: ...

        @wheel_steering.setter
        def wheel_steering(self, this: SpaceCenter.Control, value: float): ...

        @property
        def current_stage(self) -> int: ...

        @property
        def stage_lock(self) -> bool: ...

        @stage_lock.setter
        def stage_lock(self, this: SpaceCenter.Control, value: bool): ...

        @property
        def nodes(self) -> list[SpaceCenter.Node]: ...

        def activate_next_stage(self) -> list[SpaceCenter.Vessel]: ...

        def get_action_group(self, group: int) -> bool: ...

        def set_action_group(self, group: int, state: bool): ...

        def toggle_action_group(self, group: int): ...

        def add_node(self, ut: float, prograde: float = 0, normal: float = 0, radial: float = 0) -> SpaceCenter.Node: ...

        def remove_nodes(self): ...

    
    class CrewMember:
        @property
        def name(self) -> str: ...

        @name.setter
        def name(self, this: SpaceCenter.CrewMember, value: str): ...

        @property
        def type(self) -> SpaceCenter.CrewMemberType: ...

        @property
        def on_mission(self) -> bool: ...

        @property
        def courage(self) -> float: ...

        @courage.setter
        def courage(self, this: SpaceCenter.CrewMember, value: float): ...

        @property
        def stupidity(self) -> float: ...

        @stupidity.setter
        def stupidity(self, this: SpaceCenter.CrewMember, value: float): ...

        @property
        def experience(self) -> float: ...

        @experience.setter
        def experience(self, this: SpaceCenter.CrewMember, value: float): ...

        @property
        def badass(self) -> bool: ...

        @badass.setter
        def badass(self, this: SpaceCenter.CrewMember, value: bool): ...

        @property
        def veteran(self) -> bool: ...

        @veteran.setter
        def veteran(self, this: SpaceCenter.CrewMember, value: bool): ...

    
    class Flight:
        @property
        def g_force(self) -> float: ...

        @property
        def mean_altitude(self) -> float: ...

        @property
        def surface_altitude(self) -> float: ...

        @property
        def bedrock_altitude(self) -> float: ...

        @property
        def elevation(self) -> float: ...

        @property
        def latitude(self) -> float: ...

        @property
        def longitude(self) -> float: ...

        @property
        def velocity(self) -> tuple[float, float, float]: ...

        @property
        def speed(self) -> float: ...

        @property
        def horizontal_speed(self) -> float: ...

        @property
        def vertical_speed(self) -> float: ...

        @property
        def center_of_mass(self) -> tuple[float, float, float]: ...

        @property
        def rotation(self) -> tuple[float, float, float, float]: ...

        @property
        def direction(self) -> tuple[float, float, float]: ...

        @property
        def pitch(self) -> float: ...

        @property
        def heading(self) -> float: ...

        @property
        def roll(self) -> float: ...

        @property
        def prograde(self) -> tuple[float, float, float]: ...

        @property
        def retrograde(self) -> tuple[float, float, float]: ...

        @property
        def normal(self) -> tuple[float, float, float]: ...

        @property
        def anti_normal(self) -> tuple[float, float, float]: ...

        @property
        def radial(self) -> tuple[float, float, float]: ...

        @property
        def anti_radial(self) -> tuple[float, float, float]: ...

        @property
        def atmosphere_density(self) -> float: ...

        @property
        def dynamic_pressure(self) -> float: ...

        @property
        def static_pressure_at_msl(self) -> float: ...

        @property
        def static_pressure(self) -> float: ...

        @property
        def aerodynamic_force(self) -> tuple[float, float, float]: ...

        @property
        def lift(self) -> tuple[float, float, float]: ...

        @property
        def drag(self) -> tuple[float, float, float]: ...

        @property
        def speed_of_sound(self) -> float: ...

        @property
        def mach(self) -> float: ...

        @property
        def reynolds_number(self) -> float: ...

        @property
        def true_air_speed(self) -> float: ...

        @property
        def equivalent_air_speed(self) -> float: ...

        @property
        def terminal_velocity(self) -> float: ...

        @property
        def angle_of_attack(self) -> float: ...

        @property
        def sideslip_angle(self) -> float: ...

        @property
        def total_air_temperature(self) -> float: ...

        @property
        def static_air_temperature(self) -> float: ...

        @property
        def stall_fraction(self) -> float: ...

        @property
        def drag_coefficient(self) -> float: ...

        @property
        def lift_coefficient(self) -> float: ...

        @property
        def ballistic_coefficient(self) -> float: ...

        @property
        def thrust_specific_fuel_consumption(self) -> float: ...

        def simulate_aerodynamic_force_at(self, body: SpaceCenter.CelestialBody, position: tuple[float, float, float], velocity: tuple[float, float, float]) -> tuple[float, float, float]: ...

    
    class Node:
        @property
        def prograde(self) -> float: ...

        @prograde.setter
        def prograde(self, this: SpaceCenter.Node, value: float): ...

        @property
        def normal(self) -> float: ...

        @normal.setter
        def normal(self, this: SpaceCenter.Node, value: float): ...

        @property
        def radial(self) -> float: ...

        @radial.setter
        def radial(self, this: SpaceCenter.Node, value: float): ...

        @property
        def delta_v(self) -> float: ...

        @delta_v.setter
        def delta_v(self, this: SpaceCenter.Node, value: float): ...

        @property
        def remaining_delta_v(self) -> float: ...

        @property
        def ut(self) -> float: ...

        @ut.setter
        def ut(self, this: SpaceCenter.Node, value: float): ...

        @property
        def time_to(self) -> float: ...

        @property
        def orbit(self) -> SpaceCenter.Orbit: ...

        @property
        def reference_frame(self) -> SpaceCenter.ReferenceFrame: ...

        @property
        def orbital_reference_frame(self) -> SpaceCenter.ReferenceFrame: ...

        def burn_vector(self, reference_frame: SpaceCenter.ReferenceFrame = None) -> tuple[float, float, float]: ...

        def remaining_burn_vector(self, reference_frame: SpaceCenter.ReferenceFrame = None) -> tuple[float, float, float]: ...

        def remove(self): ...

        def position(self, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

        def direction(self, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

    
    class Orbit:
        @property
        def body(self) -> SpaceCenter.CelestialBody: ...

        @property
        def apoapsis(self) -> float: ...

        @property
        def periapsis(self) -> float: ...

        @property
        def apoapsis_altitude(self) -> float: ...

        @property
        def periapsis_altitude(self) -> float: ...

        @property
        def semi_major_axis(self) -> float: ...

        @property
        def semi_minor_axis(self) -> float: ...

        @property
        def radius(self) -> float: ...

        @property
        def speed(self) -> float: ...

        @property
        def period(self) -> float: ...

        @property
        def time_to_apoapsis(self) -> float: ...

        @property
        def time_to_periapsis(self) -> float: ...

        @property
        def eccentricity(self) -> float: ...

        @property
        def inclination(self) -> float: ...

        @property
        def longitude_of_ascending_node(self) -> float: ...

        @property
        def argument_of_periapsis(self) -> float: ...

        @property
        def mean_anomaly_at_epoch(self) -> float: ...

        @property
        def epoch(self) -> float: ...

        @property
        def mean_anomaly(self) -> float: ...

        @property
        def eccentric_anomaly(self) -> float: ...

        @property
        def true_anomaly(self) -> float: ...

        @property
        def next_orbit(self) -> SpaceCenter.Orbit: ...

        @property
        def time_to_soi_change(self) -> float: ...

        @property
        def orbital_speed(self) -> float: ...

        @staticmethod
        def reference_plane_normal(reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

        @staticmethod
        def reference_plane_direction(reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

        def mean_anomaly_at_ut(self, ut: float) -> float: ...

        def radius_at_true_anomaly(self, true_anomaly: float) -> float: ...

        def true_anomaly_at_radius(self, radius: float) -> float: ...

        def true_anomaly_at_ut(self, ut: float) -> float: ...

        def ut_at_true_anomaly(self, true_anomaly: float) -> float: ...

        def eccentric_anomaly_at_ut(self, ut: float) -> float: ...

        def orbital_speed_at(self, time: float) -> float: ...

        def radius_at(self, ut: float) -> float: ...

        def position_at(self, ut: float, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

        def time_of_closest_approach(self, target: SpaceCenter.Orbit) -> float: ...

        def distance_at_closest_approach(self, target: SpaceCenter.Orbit) -> float: ...

        def list_closest_approaches(self, target: SpaceCenter.Orbit, orbits: int) -> list[list[float]]: ...

        def true_anomaly_at_an(self, target: SpaceCenter.Orbit) -> float: ...

        def true_anomaly_at_dn(self, target: SpaceCenter.Orbit) -> float: ...

        def relative_inclination(self, target: SpaceCenter.Orbit) -> float: ...

    
    class Antenna:
        @property
        def part(self) -> SpaceCenter.Part: ...

        @property
        def state(self) -> SpaceCenter.AntennaState: ...

        @property
        def deployable(self) -> bool: ...

        @property
        def deployed(self) -> bool: ...

        @deployed.setter
        def deployed(self, this: SpaceCenter.Antenna, value: bool): ...

        @property
        def can_transmit(self) -> bool: ...

        @property
        def allow_partial(self) -> bool: ...

        @allow_partial.setter
        def allow_partial(self, this: SpaceCenter.Antenna, value: bool): ...

        @property
        def power(self) -> float: ...

        @property
        def combinable(self) -> bool: ...

        @property
        def combinable_exponent(self) -> float: ...

        @property
        def packet_interval(self) -> float: ...

        @property
        def packet_size(self) -> float: ...

        @property
        def packet_resource_cost(self) -> float: ...

        def transmit(self): ...

        def cancel(self): ...

    
    class CargoBay:
        @property
        def part(self) -> SpaceCenter.Part: ...

        @property
        def state(self) -> SpaceCenter.CargoBayState: ...

        @property
        def open(self) -> bool: ...

        @open.setter
        def open(self, this: SpaceCenter.CargoBay, value: bool): ...

    
    class ControlSurface:
        @property
        def part(self) -> SpaceCenter.Part: ...

        @property
        def pitch_enabled(self) -> bool: ...

        @pitch_enabled.setter
        def pitch_enabled(self, this: SpaceCenter.ControlSurface, value: bool): ...

        @property
        def yaw_enabled(self) -> bool: ...

        @yaw_enabled.setter
        def yaw_enabled(self, this: SpaceCenter.ControlSurface, value: bool): ...

        @property
        def roll_enabled(self) -> bool: ...

        @roll_enabled.setter
        def roll_enabled(self, this: SpaceCenter.ControlSurface, value: bool): ...

        @property
        def authority_limiter(self) -> float: ...

        @authority_limiter.setter
        def authority_limiter(self, this: SpaceCenter.ControlSurface, value: float): ...

        @property
        def inverted(self) -> bool: ...

        @inverted.setter
        def inverted(self, this: SpaceCenter.ControlSurface, value: bool): ...

        @property
        def deployed(self) -> bool: ...

        @deployed.setter
        def deployed(self, this: SpaceCenter.ControlSurface, value: bool): ...

        @property
        def surface_area(self) -> float: ...

        @property
        def available_torque(self) -> tuple[tuple[float, float, float], tuple[float, float, float]]: ...

    
    class Decoupler:
        @property
        def part(self) -> SpaceCenter.Part: ...

        @property
        def decoupled(self) -> bool: ...

        @property
        def staged(self) -> bool: ...

        @property
        def impulse(self) -> float: ...

        def decouple(self) -> SpaceCenter.Vessel: ...

    
    class DockingPort:
        @property
        def part(self) -> SpaceCenter.Part: ...

        @property
        def state(self) -> SpaceCenter.DockingPortState: ...

        @property
        def docked_part(self) -> SpaceCenter.Part: ...

        @property
        def reengage_distance(self) -> float: ...

        @property
        def has_shield(self) -> bool: ...

        @property
        def shielded(self) -> bool: ...

        @shielded.setter
        def shielded(self, this: SpaceCenter.DockingPort, value: bool): ...

        @property
        def reference_frame(self) -> SpaceCenter.ReferenceFrame: ...

        def undock(self) -> SpaceCenter.Vessel: ...

        def position(self, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

        def direction(self, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

        def rotation(self, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float, float]: ...

    
    class Engine:
        @property
        def part(self) -> SpaceCenter.Part: ...

        @property
        def active(self) -> bool: ...

        @active.setter
        def active(self, this: SpaceCenter.Engine, value: bool): ...

        @property
        def thrust(self) -> float: ...

        @property
        def available_thrust(self) -> float: ...

        @property
        def max_thrust(self) -> float: ...

        @property
        def max_vacuum_thrust(self) -> float: ...

        @property
        def thrust_limit(self) -> float: ...

        @thrust_limit.setter
        def thrust_limit(self, this: SpaceCenter.Engine, value: float): ...

        @property
        def thrusters(self) -> list[SpaceCenter.Thruster]: ...

        @property
        def specific_impulse(self) -> float: ...

        @property
        def vacuum_specific_impulse(self) -> float: ...

        @property
        def kerbin_sea_level_specific_impulse(self) -> float: ...

        @property
        def propellant_names(self) -> list[str]: ...

        @property
        def propellants(self) -> list[SpaceCenter.Propellant]: ...

        @property
        def propellant_ratios(self) -> dict[str, float]: ...

        @property
        def has_fuel(self) -> bool: ...

        @property
        def throttle(self) -> float: ...

        @property
        def throttle_locked(self) -> bool: ...

        @property
        def can_restart(self) -> bool: ...

        @property
        def can_shutdown(self) -> bool: ...

        @property
        def has_modes(self) -> bool: ...

        @property
        def mode(self) -> str: ...

        @mode.setter
        def mode(self, this: SpaceCenter.Engine, value: str): ...

        @property
        def modes(self) -> dict[str, SpaceCenter.Engine]: ...

        @property
        def auto_mode_switch(self) -> bool: ...

        @auto_mode_switch.setter
        def auto_mode_switch(self, this: SpaceCenter.Engine, value: bool): ...

        @property
        def gimballed(self) -> bool: ...

        @property
        def gimbal_range(self) -> float: ...

        @property
        def gimbal_locked(self) -> bool: ...

        @gimbal_locked.setter
        def gimbal_locked(self, this: SpaceCenter.Engine, value: bool): ...

        @property
        def gimbal_limit(self) -> float: ...

        @gimbal_limit.setter
        def gimbal_limit(self, this: SpaceCenter.Engine, value: float): ...

        @property
        def available_torque(self) -> tuple[tuple[float, float, float], tuple[float, float, float]]: ...

        def toggle_mode(self): ...

    
    class Experiment:
        @property
        def part(self) -> SpaceCenter.Part: ...

        @property
        def name(self) -> str: ...

        @property
        def title(self) -> str: ...

        @property
        def inoperable(self) -> bool: ...

        @property
        def deployed(self) -> bool: ...

        @property
        def rerunnable(self) -> bool: ...

        @property
        def has_data(self) -> bool: ...

        @property
        def data(self) -> list[SpaceCenter.ScienceData]: ...

        @property
        def available(self) -> bool: ...

        @property
        def biome(self) -> str: ...

        @property
        def science_subject(self) -> SpaceCenter.ScienceSubject: ...

        def run(self): ...

        def transmit(self): ...

        def dump(self): ...

        def reset(self): ...

    
    class Fairing:
        @property
        def part(self) -> SpaceCenter.Part: ...

        @property
        def jettisoned(self) -> bool: ...

        def jettison(self): ...

    
    class Force:
        @property
        def part(self) -> SpaceCenter.Part: ...

        @property
        def force_vector(self) -> tuple[float, float, float]: ...

        @force_vector.setter
        def force_vector(self, this: SpaceCenter.Force, value: tuple[float, float, float]): ...

        @property
        def position(self) -> tuple[float, float, float]: ...

        @position.setter
        def position(self, this: SpaceCenter.Force, value: tuple[float, float, float]): ...

        @property
        def reference_frame(self) -> SpaceCenter.ReferenceFrame: ...

        @reference_frame.setter
        def reference_frame(self, this: SpaceCenter.Force, value: SpaceCenter.ReferenceFrame): ...

        def remove(self): ...

    
    class Intake:
        @property
        def part(self) -> SpaceCenter.Part: ...

        @property
        def open(self) -> bool: ...

        @open.setter
        def open(self, this: SpaceCenter.Intake, value: bool): ...

        @property
        def speed(self) -> float: ...

        @property
        def flow(self) -> float: ...

        @property
        def area(self) -> float: ...

    
    class LaunchClamp:
        @property
        def part(self) -> SpaceCenter.Part: ...

        def release(self): ...

    
    class Leg:
        @property
        def part(self) -> SpaceCenter.Part: ...

        @property
        def state(self) -> SpaceCenter.LegState: ...

        @property
        def deployable(self) -> bool: ...

        @property
        def deployed(self) -> bool: ...

        @deployed.setter
        def deployed(self, this: SpaceCenter.Leg, value: bool): ...

        @property
        def is_grounded(self) -> bool: ...

    
    class Light:
        @property
        def part(self) -> SpaceCenter.Part: ...

        @property
        def active(self) -> bool: ...

        @active.setter
        def active(self, this: SpaceCenter.Light, value: bool): ...

        @property
        def color(self) -> tuple[float, float, float]: ...

        @color.setter
        def color(self, this: SpaceCenter.Light, value: tuple[float, float, float]): ...

        @property
        def power_usage(self) -> float: ...

    
    class Module:
        @property
        def name(self) -> str: ...

        @property
        def part(self) -> SpaceCenter.Part: ...

        @property
        def fields(self) -> dict[str, str]: ...

        @property
        def events(self) -> list[str]: ...

        @property
        def actions(self) -> list[str]: ...

        def has_field(self, name: str) -> bool: ...

        def get_field(self, name: str) -> str: ...

        def set_field_int(self, name: str, value: int): ...

        def set_field_float(self, name: str, value: float): ...

        def set_field_string(self, name: str, value: str): ...

        def reset_field(self, name: str): ...

        def has_event(self, name: str) -> bool: ...

        def trigger_event(self, name: str): ...

        def has_action(self, name: str) -> bool: ...

        def set_action(self, name: str, value: bool = True): ...

    
    class Parachute:
        @property
        def part(self) -> SpaceCenter.Part: ...

        @property
        def deployed(self) -> bool: ...

        @property
        def armed(self) -> bool: ...

        @property
        def state(self) -> SpaceCenter.ParachuteState: ...

        @property
        def deploy_altitude(self) -> float: ...

        @deploy_altitude.setter
        def deploy_altitude(self, this: SpaceCenter.Parachute, value: float): ...

        @property
        def deploy_min_pressure(self) -> float: ...

        @deploy_min_pressure.setter
        def deploy_min_pressure(self, this: SpaceCenter.Parachute, value: float): ...

        def deploy(self): ...

        def arm(self): ...

    
    class Part:
        @property
        def name(self) -> str: ...

        @property
        def title(self) -> str: ...

        @property
        def tag(self) -> str: ...

        @tag.setter
        def tag(self, this: SpaceCenter.Part, value: str): ...

        @property
        def highlighted(self) -> bool: ...

        @highlighted.setter
        def highlighted(self, this: SpaceCenter.Part, value: bool): ...

        @property
        def highlight_color(self) -> tuple[float, float, float]: ...

        @highlight_color.setter
        def highlight_color(self, this: SpaceCenter.Part, value: tuple[float, float, float]): ...

        @property
        def cost(self) -> float: ...

        @property
        def vessel(self) -> SpaceCenter.Vessel: ...

        @property
        def parent(self) -> SpaceCenter.Part: ...

        @property
        def children(self) -> list[SpaceCenter.Part]: ...

        @property
        def axially_attached(self) -> bool: ...

        @property
        def radially_attached(self) -> bool: ...

        @property
        def stage(self) -> int: ...

        @property
        def decouple_stage(self) -> int: ...

        @property
        def massless(self) -> bool: ...

        @property
        def mass(self) -> float: ...

        @property
        def dry_mass(self) -> float: ...

        @property
        def shielded(self) -> bool: ...

        @property
        def dynamic_pressure(self) -> float: ...

        @property
        def impact_tolerance(self) -> float: ...

        @property
        def temperature(self) -> float: ...

        @property
        def skin_temperature(self) -> float: ...

        @property
        def max_temperature(self) -> float: ...

        @property
        def max_skin_temperature(self) -> float: ...

        @property
        def thermal_mass(self) -> float: ...

        @property
        def thermal_skin_mass(self) -> float: ...

        @property
        def thermal_resource_mass(self) -> float: ...

        @property
        def thermal_internal_flux(self) -> float: ...

        @property
        def thermal_conduction_flux(self) -> float: ...

        @property
        def thermal_convection_flux(self) -> float: ...

        @property
        def thermal_radiation_flux(self) -> float: ...

        @property
        def thermal_skin_to_internal_flux(self) -> float: ...

        @property
        def resources(self) -> SpaceCenter.Resources: ...

        @property
        def crossfeed(self) -> bool: ...

        @property
        def is_fuel_line(self) -> bool: ...

        @property
        def fuel_lines_from(self) -> list[SpaceCenter.Part]: ...

        @property
        def fuel_lines_to(self) -> list[SpaceCenter.Part]: ...

        @property
        def modules(self) -> list[SpaceCenter.Module]: ...

        @property
        def antenna(self) -> SpaceCenter.Antenna: ...

        @property
        def cargo_bay(self) -> SpaceCenter.CargoBay: ...

        @property
        def control_surface(self) -> SpaceCenter.ControlSurface: ...

        @property
        def decoupler(self) -> SpaceCenter.Decoupler: ...

        @property
        def docking_port(self) -> SpaceCenter.DockingPort: ...

        @property
        def engine(self) -> SpaceCenter.Engine: ...

        @property
        def experiment(self) -> SpaceCenter.Experiment: ...

        @property
        def experiments(self) -> list[SpaceCenter.Experiment]: ...

        @property
        def fairing(self) -> SpaceCenter.Fairing: ...

        @property
        def intake(self) -> SpaceCenter.Intake: ...

        @property
        def leg(self) -> SpaceCenter.Leg: ...

        @property
        def launch_clamp(self) -> SpaceCenter.LaunchClamp: ...

        @property
        def light(self) -> SpaceCenter.Light: ...

        @property
        def parachute(self) -> SpaceCenter.Parachute: ...

        @property
        def radiator(self) -> SpaceCenter.Radiator: ...

        @property
        def rcs(self) -> SpaceCenter.RCS: ...

        @property
        def reaction_wheel(self) -> SpaceCenter.ReactionWheel: ...

        @property
        def resource_converter(self) -> SpaceCenter.ResourceConverter: ...

        @property
        def resource_harvester(self) -> SpaceCenter.ResourceHarvester: ...

        @property
        def sensor(self) -> SpaceCenter.Sensor: ...

        @property
        def solar_panel(self) -> SpaceCenter.SolarPanel: ...

        @property
        def wheel(self) -> SpaceCenter.Wheel: ...

        @property
        def moment_of_inertia(self) -> tuple[float, float, float]: ...

        @property
        def inertia_tensor(self) -> list[float]: ...

        @property
        def reference_frame(self) -> SpaceCenter.ReferenceFrame: ...

        @property
        def center_of_mass_reference_frame(self) -> SpaceCenter.ReferenceFrame: ...

        def position(self, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

        def center_of_mass(self, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

        def bounding_box(self, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[tuple[float, float, float], tuple[float, float, float]]: ...

        def direction(self, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

        def velocity(self, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

        def rotation(self, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float, float]: ...

        def add_force(self, force: tuple[float, float, float], position: tuple[float, float, float], reference_frame: SpaceCenter.ReferenceFrame) -> SpaceCenter.Force: ...

        def instantaneous_force(self, force: tuple[float, float, float], position: tuple[float, float, float], reference_frame: SpaceCenter.ReferenceFrame): ...

    
    class Parts:
        @property
        def all(self) -> list[SpaceCenter.Part]: ...

        @property
        def root(self) -> SpaceCenter.Part: ...

        @property
        def controlling(self) -> SpaceCenter.Part: ...

        @controlling.setter
        def controlling(self, this: SpaceCenter.Parts, value: SpaceCenter.Part): ...

        @property
        def antennas(self) -> list[SpaceCenter.Antenna]: ...

        @property
        def control_surfaces(self) -> list[SpaceCenter.ControlSurface]: ...

        @property
        def cargo_bays(self) -> list[SpaceCenter.CargoBay]: ...

        @property
        def decouplers(self) -> list[SpaceCenter.Decoupler]: ...

        @property
        def docking_ports(self) -> list[SpaceCenter.DockingPort]: ...

        @property
        def engines(self) -> list[SpaceCenter.Engine]: ...

        @property
        def experiments(self) -> list[SpaceCenter.Experiment]: ...

        @property
        def fairings(self) -> list[SpaceCenter.Fairing]: ...

        @property
        def intakes(self) -> list[SpaceCenter.Intake]: ...

        @property
        def legs(self) -> list[SpaceCenter.Leg]: ...

        @property
        def launch_clamps(self) -> list[SpaceCenter.LaunchClamp]: ...

        @property
        def lights(self) -> list[SpaceCenter.Light]: ...

        @property
        def parachutes(self) -> list[SpaceCenter.Parachute]: ...

        @property
        def radiators(self) -> list[SpaceCenter.Radiator]: ...

        @property
        def rcs(self) -> list[SpaceCenter.RCS]: ...

        @property
        def reaction_wheels(self) -> list[SpaceCenter.ReactionWheel]: ...

        @property
        def resource_converters(self) -> list[SpaceCenter.ResourceConverter]: ...

        @property
        def resource_harvesters(self) -> list[SpaceCenter.ResourceHarvester]: ...

        @property
        def sensors(self) -> list[SpaceCenter.Sensor]: ...

        @property
        def solar_panels(self) -> list[SpaceCenter.SolarPanel]: ...

        @property
        def wheels(self) -> list[SpaceCenter.Wheel]: ...

        def with_name(self, name: str) -> list[SpaceCenter.Part]: ...

        def with_title(self, title: str) -> list[SpaceCenter.Part]: ...

        def with_tag(self, tag: str) -> list[SpaceCenter.Part]: ...

        def with_module(self, module_name: str) -> list[SpaceCenter.Part]: ...

        def in_stage(self, stage: int) -> list[SpaceCenter.Part]: ...

        def in_decouple_stage(self, stage: int) -> list[SpaceCenter.Part]: ...

        def modules_with_name(self, module_name: str) -> list[SpaceCenter.Module]: ...

    
    class Propellant:
        @property
        def name(self) -> str: ...

        @property
        def current_amount(self) -> float: ...

        @property
        def current_requirement(self) -> float: ...

        @property
        def total_resource_available(self) -> float: ...

        @property
        def total_resource_capacity(self) -> float: ...

        @property
        def ignore_for_isp(self) -> bool: ...

        @property
        def ignore_for_thrust_curve(self) -> bool: ...

        @property
        def draw_stack_gauge(self) -> bool: ...

        @property
        def is_deprived(self) -> bool: ...

        @property
        def ratio(self) -> float: ...

    
    class RCS:
        @property
        def part(self) -> SpaceCenter.Part: ...

        @property
        def active(self) -> bool: ...

        @property
        def enabled(self) -> bool: ...

        @enabled.setter
        def enabled(self, this: SpaceCenter.RCS, value: bool): ...

        @property
        def pitch_enabled(self) -> bool: ...

        @pitch_enabled.setter
        def pitch_enabled(self, this: SpaceCenter.RCS, value: bool): ...

        @property
        def yaw_enabled(self) -> bool: ...

        @yaw_enabled.setter
        def yaw_enabled(self, this: SpaceCenter.RCS, value: bool): ...

        @property
        def roll_enabled(self) -> bool: ...

        @roll_enabled.setter
        def roll_enabled(self, this: SpaceCenter.RCS, value: bool): ...

        @property
        def forward_enabled(self) -> bool: ...

        @forward_enabled.setter
        def forward_enabled(self, this: SpaceCenter.RCS, value: bool): ...

        @property
        def up_enabled(self) -> bool: ...

        @up_enabled.setter
        def up_enabled(self, this: SpaceCenter.RCS, value: bool): ...

        @property
        def right_enabled(self) -> bool: ...

        @right_enabled.setter
        def right_enabled(self, this: SpaceCenter.RCS, value: bool): ...

        @property
        def available_torque(self) -> tuple[tuple[float, float, float], tuple[float, float, float]]: ...

        @property
        def available_thrust(self) -> float: ...

        @property
        def max_thrust(self) -> float: ...

        @property
        def max_vacuum_thrust(self) -> float: ...

        @property
        def thrust_limit(self) -> float: ...

        @thrust_limit.setter
        def thrust_limit(self, this: SpaceCenter.RCS, value: float): ...

        @property
        def thrusters(self) -> list[SpaceCenter.Thruster]: ...

        @property
        def specific_impulse(self) -> float: ...

        @property
        def vacuum_specific_impulse(self) -> float: ...

        @property
        def kerbin_sea_level_specific_impulse(self) -> float: ...

        @property
        def propellants(self) -> list[str]: ...

        @property
        def propellant_ratios(self) -> dict[str, float]: ...

        @property
        def has_fuel(self) -> bool: ...

    
    class Radiator:
        @property
        def part(self) -> SpaceCenter.Part: ...

        @property
        def deployable(self) -> bool: ...

        @property
        def deployed(self) -> bool: ...

        @deployed.setter
        def deployed(self, this: SpaceCenter.Radiator, value: bool): ...

        @property
        def state(self) -> SpaceCenter.RadiatorState: ...

    
    class ReactionWheel:
        @property
        def part(self) -> SpaceCenter.Part: ...

        @property
        def active(self) -> bool: ...

        @active.setter
        def active(self, this: SpaceCenter.ReactionWheel, value: bool): ...

        @property
        def broken(self) -> bool: ...

        @property
        def available_torque(self) -> tuple[tuple[float, float, float], tuple[float, float, float]]: ...

        @property
        def max_torque(self) -> tuple[tuple[float, float, float], tuple[float, float, float]]: ...

    
    class ResourceConverter:
        @property
        def part(self) -> SpaceCenter.Part: ...

        @property
        def count(self) -> int: ...

        @property
        def thermal_efficiency(self) -> float: ...

        @property
        def core_temperature(self) -> float: ...

        @property
        def optimum_core_temperature(self) -> float: ...

        def active(self, index: int) -> bool: ...

        def name(self, index: int) -> str: ...

        def start(self, index: int): ...

        def stop(self, index: int): ...

        def state(self, index: int) -> SpaceCenter.ResourceConverterState: ...

        def status_info(self, index: int) -> str: ...

        def inputs(self, index: int) -> list[str]: ...

        def outputs(self, index: int) -> list[str]: ...

    
    class ResourceHarvester:
        @property
        def part(self) -> SpaceCenter.Part: ...

        @property
        def state(self) -> SpaceCenter.ResourceHarvesterState: ...

        @property
        def deployed(self) -> bool: ...

        @deployed.setter
        def deployed(self, this: SpaceCenter.ResourceHarvester, value: bool): ...

        @property
        def active(self) -> bool: ...

        @active.setter
        def active(self, this: SpaceCenter.ResourceHarvester, value: bool): ...

        @property
        def extraction_rate(self) -> float: ...

        @property
        def thermal_efficiency(self) -> float: ...

        @property
        def core_temperature(self) -> float: ...

        @property
        def optimum_core_temperature(self) -> float: ...

    
    class ScienceData:
        @property
        def data_amount(self) -> float: ...

        @property
        def science_value(self) -> float: ...

        @property
        def transmit_value(self) -> float: ...

    
    class ScienceSubject:
        @property
        def science(self) -> float: ...

        @property
        def science_cap(self) -> float: ...

        @property
        def is_complete(self) -> bool: ...

        @property
        def data_scale(self) -> float: ...

        @property
        def scientific_value(self) -> float: ...

        @property
        def subject_value(self) -> float: ...

        @property
        def title(self) -> str: ...

    
    class Sensor:
        @property
        def part(self) -> SpaceCenter.Part: ...

        @property
        def active(self) -> bool: ...

        @active.setter
        def active(self, this: SpaceCenter.Sensor, value: bool): ...

        @property
        def value(self) -> str: ...

    
    class SolarPanel:
        @property
        def part(self) -> SpaceCenter.Part: ...

        @property
        def deployable(self) -> bool: ...

        @property
        def deployed(self) -> bool: ...

        @deployed.setter
        def deployed(self, this: SpaceCenter.SolarPanel, value: bool): ...

        @property
        def state(self) -> SpaceCenter.SolarPanelState: ...

        @property
        def energy_flow(self) -> float: ...

        @property
        def sun_exposure(self) -> float: ...

    
    class Thruster:
        @property
        def part(self) -> SpaceCenter.Part: ...

        @property
        def thrust_reference_frame(self) -> SpaceCenter.ReferenceFrame: ...

        @property
        def gimballed(self) -> bool: ...

        @property
        def gimbal_angle(self) -> tuple[float, float, float]: ...

        def thrust_position(self, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

        def thrust_direction(self, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

        def initial_thrust_position(self, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

        def initial_thrust_direction(self, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

        def gimbal_position(self, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

    
    class Wheel:
        @property
        def part(self) -> SpaceCenter.Part: ...

        @property
        def state(self) -> SpaceCenter.WheelState: ...

        @property
        def radius(self) -> float: ...

        @property
        def grounded(self) -> bool: ...

        @property
        def has_brakes(self) -> bool: ...

        @property
        def brakes(self) -> float: ...

        @brakes.setter
        def brakes(self, this: SpaceCenter.Wheel, value: float): ...

        @property
        def auto_friction_control(self) -> bool: ...

        @auto_friction_control.setter
        def auto_friction_control(self, this: SpaceCenter.Wheel, value: bool): ...

        @property
        def manual_friction_control(self) -> float: ...

        @manual_friction_control.setter
        def manual_friction_control(self, this: SpaceCenter.Wheel, value: float): ...

        @property
        def deployable(self) -> bool: ...

        @property
        def deployed(self) -> bool: ...

        @deployed.setter
        def deployed(self, this: SpaceCenter.Wheel, value: bool): ...

        @property
        def powered(self) -> bool: ...

        @property
        def motor_enabled(self) -> bool: ...

        @motor_enabled.setter
        def motor_enabled(self, this: SpaceCenter.Wheel, value: bool): ...

        @property
        def motor_inverted(self) -> bool: ...

        @motor_inverted.setter
        def motor_inverted(self, this: SpaceCenter.Wheel, value: bool): ...

        @property
        def motor_state(self) -> SpaceCenter.MotorState: ...

        @property
        def motor_output(self) -> float: ...

        @property
        def traction_control_enabled(self) -> bool: ...

        @traction_control_enabled.setter
        def traction_control_enabled(self, this: SpaceCenter.Wheel, value: bool): ...

        @property
        def traction_control(self) -> float: ...

        @traction_control.setter
        def traction_control(self, this: SpaceCenter.Wheel, value: float): ...

        @property
        def drive_limiter(self) -> float: ...

        @drive_limiter.setter
        def drive_limiter(self, this: SpaceCenter.Wheel, value: float): ...

        @property
        def steerable(self) -> bool: ...

        @property
        def steering_enabled(self) -> bool: ...

        @steering_enabled.setter
        def steering_enabled(self, this: SpaceCenter.Wheel, value: bool): ...

        @property
        def steering_inverted(self) -> bool: ...

        @steering_inverted.setter
        def steering_inverted(self, this: SpaceCenter.Wheel, value: bool): ...

        @property
        def has_suspension(self) -> bool: ...

        @property
        def suspension_spring_strength(self) -> float: ...

        @property
        def suspension_damper_strength(self) -> float: ...

        @property
        def broken(self) -> bool: ...

        @property
        def repairable(self) -> bool: ...

        @property
        def stress(self) -> float: ...

        @property
        def stress_tolerance(self) -> float: ...

        @property
        def stress_percentage(self) -> float: ...

        @property
        def deflection(self) -> float: ...

        @property
        def slip(self) -> float: ...

    
    class ReferenceFrame:
        @staticmethod
        def create_relative(reference_frame: SpaceCenter.ReferenceFrame, position: tuple[float, float, float] = (0, 0, 0), rotation: tuple[float, float, float, float] = (0, 0, 0, 1), velocity: tuple[float, float, float] = (0, 0, 0), angular_velocity: tuple[float, float, float] = (0, 0, 0)) -> SpaceCenter.ReferenceFrame: ...

        @staticmethod
        def create_hybrid(position: SpaceCenter.ReferenceFrame, rotation: SpaceCenter.ReferenceFrame = None, velocity: SpaceCenter.ReferenceFrame = None, angular_velocity: SpaceCenter.ReferenceFrame = None) -> SpaceCenter.ReferenceFrame: ...

    
    class Resource:
        @property
        def name(self) -> str: ...

        @property
        def part(self) -> SpaceCenter.Part: ...

        @property
        def max(self) -> float: ...

        @property
        def amount(self) -> float: ...

        @property
        def density(self) -> float: ...

        @property
        def flow_mode(self) -> SpaceCenter.ResourceFlowMode: ...

        @property
        def enabled(self) -> bool: ...

        @enabled.setter
        def enabled(self, this: SpaceCenter.Resource, value: bool): ...

    
    class ResourceTransfer:
        @property
        def complete(self) -> bool: ...

        @property
        def amount(self) -> float: ...

        @staticmethod
        def start(from_part: SpaceCenter.Part, to_part: SpaceCenter.Part, resource: str, max_amount: float) -> SpaceCenter.ResourceTransfer: ...

    
    class Resources:
        @property
        def all(self) -> list[SpaceCenter.Resource]: ...

        @property
        def names(self) -> list[str]: ...

        @property
        def enabled(self) -> bool: ...

        @enabled.setter
        def enabled(self, this: SpaceCenter.Resources, value: bool): ...

        @staticmethod
        def density(name: str) -> float: ...

        @staticmethod
        def flow_mode(name: str) -> SpaceCenter.ResourceFlowMode: ...

        def with_resource(self, name: str) -> list[SpaceCenter.Resource]: ...

        def has_resource(self, name: str) -> bool: ...

        def max(self, name: str) -> float: ...

        def amount(self, name: str) -> float: ...

    
    class Vessel:
        @property
        def name(self) -> str: ...

        @name.setter
        def name(self, this: SpaceCenter.Vessel, value: str): ...

        @property
        def type(self) -> SpaceCenter.VesselType: ...

        @type.setter
        def type(self, this: SpaceCenter.Vessel, value: SpaceCenter.VesselType): ...

        @property
        def situation(self) -> SpaceCenter.VesselSituation: ...

        @property
        def recoverable(self) -> bool: ...

        @property
        def met(self) -> float: ...

        @property
        def biome(self) -> str: ...

        @property
        def orbit(self) -> SpaceCenter.Orbit: ...

        @property
        def control(self) -> SpaceCenter.Control: ...

        @property
        def comms(self) -> SpaceCenter.Comms: ...

        @property
        def auto_pilot(self) -> SpaceCenter.AutoPilot: ...

        @property
        def crew_capacity(self) -> int: ...

        @property
        def crew_count(self) -> int: ...

        @property
        def crew(self) -> list[SpaceCenter.CrewMember]: ...

        @property
        def resources(self) -> SpaceCenter.Resources: ...

        @property
        def parts(self) -> SpaceCenter.Parts: ...

        @property
        def mass(self) -> float: ...

        @property
        def dry_mass(self) -> float: ...

        @property
        def thrust(self) -> float: ...

        @property
        def available_thrust(self) -> float: ...

        @property
        def max_thrust(self) -> float: ...

        @property
        def max_vacuum_thrust(self) -> float: ...

        @property
        def specific_impulse(self) -> float: ...

        @property
        def vacuum_specific_impulse(self) -> float: ...

        @property
        def kerbin_sea_level_specific_impulse(self) -> float: ...

        @property
        def moment_of_inertia(self) -> tuple[float, float, float]: ...

        @property
        def inertia_tensor(self) -> list[float]: ...

        @property
        def available_torque(self) -> tuple[tuple[float, float, float], tuple[float, float, float]]: ...

        @property
        def available_reaction_wheel_torque(self) -> tuple[tuple[float, float, float], tuple[float, float, float]]: ...

        @property
        def available_rcs_torque(self) -> tuple[tuple[float, float, float], tuple[float, float, float]]: ...

        @property
        def available_engine_torque(self) -> tuple[tuple[float, float, float], tuple[float, float, float]]: ...

        @property
        def available_control_surface_torque(self) -> tuple[tuple[float, float, float], tuple[float, float, float]]: ...

        @property
        def available_other_torque(self) -> tuple[tuple[float, float, float], tuple[float, float, float]]: ...

        @property
        def reference_frame(self) -> SpaceCenter.ReferenceFrame: ...

        @property
        def orbital_reference_frame(self) -> SpaceCenter.ReferenceFrame: ...

        @property
        def surface_reference_frame(self) -> SpaceCenter.ReferenceFrame: ...

        @property
        def surface_velocity_reference_frame(self) -> SpaceCenter.ReferenceFrame: ...

        def recover(self): ...

        def flight(self, reference_frame: SpaceCenter.ReferenceFrame = None) -> SpaceCenter.Flight: ...

        def resources_in_decouple_stage(self, stage: int, cumulative: bool = True) -> SpaceCenter.Resources: ...

        def position(self, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

        def bounding_box(self, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[tuple[float, float, float], tuple[float, float, float]]: ...

        def velocity(self, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

        def rotation(self, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float, float]: ...

        def direction(self, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

        def angular_velocity(self, reference_frame: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

    
    class Waypoint:
        @property
        def body(self) -> SpaceCenter.CelestialBody: ...

        @body.setter
        def body(self, this: SpaceCenter.Waypoint, value: SpaceCenter.CelestialBody): ...

        @property
        def name(self) -> str: ...

        @name.setter
        def name(self, this: SpaceCenter.Waypoint, value: str): ...

        @property
        def color(self) -> int: ...

        @color.setter
        def color(self, this: SpaceCenter.Waypoint, value: int): ...

        @property
        def icon(self) -> str: ...

        @icon.setter
        def icon(self, this: SpaceCenter.Waypoint, value: str): ...

        @property
        def latitude(self) -> float: ...

        @latitude.setter
        def latitude(self, this: SpaceCenter.Waypoint, value: float): ...

        @property
        def longitude(self) -> float: ...

        @longitude.setter
        def longitude(self, this: SpaceCenter.Waypoint, value: float): ...

        @property
        def mean_altitude(self) -> float: ...

        @mean_altitude.setter
        def mean_altitude(self, this: SpaceCenter.Waypoint, value: float): ...

        @property
        def surface_altitude(self) -> float: ...

        @surface_altitude.setter
        def surface_altitude(self, this: SpaceCenter.Waypoint, value: float): ...

        @property
        def bedrock_altitude(self) -> float: ...

        @bedrock_altitude.setter
        def bedrock_altitude(self, this: SpaceCenter.Waypoint, value: float): ...

        @property
        def near_surface(self) -> bool: ...

        @property
        def grounded(self) -> bool: ...

        @property
        def index(self) -> int: ...

        @property
        def clustered(self) -> bool: ...

        @property
        def has_contract(self) -> bool: ...

        @property
        def contract(self) -> SpaceCenter.Contract: ...

        def remove(self): ...

    
    class WaypointManager:
        @property
        def waypoints(self) -> list[SpaceCenter.Waypoint]: ...

        @property
        def icons(self) -> list[str]: ...

        @property
        def colors(self) -> dict[str, int]: ...

        def add_waypoint(self, latitude: float, longitude: float, body: SpaceCenter.CelestialBody, name: str) -> SpaceCenter.Waypoint: ...

        def add_waypoint_at_altitude(self, latitude: float, longitude: float, altitude: float, body: SpaceCenter.CelestialBody, name: str) -> SpaceCenter.Waypoint: ...

    
    @property
    def game_mode(self) -> SpaceCenter.GameMode: ...

    @property
    def science(self) -> float: ...

    @property
    def funds(self) -> float: ...

    @property
    def reputation(self) -> float: ...

    @property
    def active_vessel(self) -> SpaceCenter.Vessel: ...

    @active_vessel.setter
    def active_vessel(self, value: SpaceCenter.Vessel): ...

    @property
    def vessels(self) -> list[SpaceCenter.Vessel]: ...

    @property
    def bodies(self) -> dict[str, SpaceCenter.CelestialBody]: ...

    @property
    def target_body(self) -> SpaceCenter.CelestialBody: ...

    @target_body.setter
    def target_body(self, value: SpaceCenter.CelestialBody): ...

    @property
    def target_vessel(self) -> SpaceCenter.Vessel: ...

    @target_vessel.setter
    def target_vessel(self, value: SpaceCenter.Vessel): ...

    @property
    def target_docking_port(self) -> SpaceCenter.DockingPort: ...

    @target_docking_port.setter
    def target_docking_port(self, value: SpaceCenter.DockingPort): ...

    @property
    def waypoint_manager(self) -> SpaceCenter.WaypointManager: ...

    @property
    def contract_manager(self) -> SpaceCenter.ContractManager: ...

    @property
    def camera(self) -> SpaceCenter.Camera: ...

    @property
    def ui_visible(self) -> bool: ...

    @ui_visible.setter
    def ui_visible(self, value: bool): ...

    @property
    def navball(self) -> bool: ...

    @navball.setter
    def navball(self, value: bool): ...

    @property
    def ut(self) -> float: ...

    @property
    def g(self) -> float: ...

    @property
    def warp_mode(self) -> SpaceCenter.WarpMode: ...

    @property
    def warp_rate(self) -> float: ...

    @property
    def warp_factor(self) -> float: ...

    @property
    def rails_warp_factor(self) -> int: ...

    @rails_warp_factor.setter
    def rails_warp_factor(self, value: int): ...

    @property
    def physics_warp_factor(self) -> int: ...

    @physics_warp_factor.setter
    def physics_warp_factor(self, value: int): ...

    @property
    def maximum_rails_warp_factor(self) -> int: ...

    @property
    def far_available(self) -> bool: ...

    def clear_target(self): ...

    def launchable_vessels(self, craft_directory: str) -> list[str]: ...

    def launch_vessel(self, craft_directory: str, name: str, launch_site: str, recover: bool = True): ...

    def launch_vessel_from_vab(self, name: str, recover: bool = True): ...

    def launch_vessel_from_sph(self, name: str, recover: bool = True): ...

    def save(self, name: str): ...

    def load(self, name: str): ...

    def quicksave(self): ...

    def quickload(self): ...

    def can_rails_warp_at(self, factor: int = 2) -> bool: ...

    def warp_to(self, ut: float, max_rails_rate: float = 100000, max_physics_rate: float = 2): ...

    def transform_position(self, position: tuple[float, float, float], from_: SpaceCenter.ReferenceFrame, to: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

    def transform_direction(self, direction: tuple[float, float, float], from_: SpaceCenter.ReferenceFrame, to: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

    def transform_rotation(self, rotation: tuple[float, float, float, float], from_: SpaceCenter.ReferenceFrame, to: SpaceCenter.ReferenceFrame) -> tuple[float, float, float, float]: ...

    def transform_velocity(self, position: tuple[float, float, float], velocity: tuple[float, float, float], from_: SpaceCenter.ReferenceFrame, to: SpaceCenter.ReferenceFrame) -> tuple[float, float, float]: ...

    def raycast_distance(self, position: tuple[float, float, float], direction: tuple[float, float, float], reference_frame: SpaceCenter.ReferenceFrame) -> float: ...

    def raycast_part(self, position: tuple[float, float, float], direction: tuple[float, float, float], reference_frame: SpaceCenter.ReferenceFrame) -> SpaceCenter.Part: ...


