from typing import Any, Optional

class StreamImpl:
    def __init__(self, conn: Any, stream_id: Any, return_type: Any, update_lock: Any) -> None: ...
    @property
    def return_type(self): ...
    def start(self) -> None: ...
    @property
    def rate(self): ...
    @rate.setter
    def rate(self, value: Any) -> None: ...
    @property
    def started(self): ...
    @property
    def value(self): ...
    @value.setter
    def value(self, value: Any) -> None: ...
    @property
    def updated(self): ...
    @property
    def condition(self): ...
    @property
    def callbacks(self): ...
    def add_callback(self, callback: Any): ...
    def remove_callback(self, callback: Any): ...
    def remove(self) -> None: ...

class StreamManager:
    def __init__(self, conn: Any) -> None: ...
    def add_stream(self, return_type: Any, call: Any): ...
    def get_stream(self, return_type: Any, stream_id: Any): ...
    def remove_stream(self, stream_id: Any) -> None: ...
    @property
    def update_condition(self): ...
    def wait_for_update(self, timeout: Optional[Any] = ...) -> None: ...
    @property
    def update_callbacks(self): ...
    def add_update_callback(self, callback: Any): ...
    def remove_update_callback(self, callback: Any): ...
    def update(self, results: Any) -> None: ...

def update_thread(manager: Any, connection: Any, stop: Any) -> None: ...
