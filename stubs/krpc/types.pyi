from typing import Any, Optional

VALUE_TYPES: Any
MESSAGE_TYPES: Any
EXCEPTION_TYPES: Any

class Types:
    def __init__(self) -> None: ...
    def as_type(self, protobuf_type: Any, doc: Optional[Any] = ...): ...
    @classmethod
    def is_none_type(cls, protobuf_type: Any): ...
    @property
    def double_type(self): ...
    @property
    def float_type(self): ...
    @property
    def sint32_type(self): ...
    @property
    def sint64_type(self): ...
    @property
    def uint32_type(self): ...
    @property
    def uint64_type(self): ...
    @property
    def bool_type(self): ...
    @property
    def string_type(self): ...
    @property
    def bytes_type(self): ...
    def class_type(self, service: Any, name: Any, doc: Optional[Any] = ...): ...
    def enumeration_type(self, service: Any, name: Any, doc: Optional[Any] = ...): ...
    def exception_type(self, service: Any, name: Any, doc: Optional[Any] = ...): ...
    def tuple_type(self, *value_types: Any): ...
    def list_type(self, value_type: Any): ...
    def set_type(self, value_type: Any): ...
    def dictionary_type(self, key_type: Any, value_type: Any): ...
    @property
    def procedure_call_type(self): ...
    @property
    def services_type(self): ...
    @property
    def stream_type(self) -> Stream: ...
    @property
    def status_type(self) -> Status: ...
    def coerce_to(self, value: Any, typ: Any): ...

class Event:


class Stream:
    @property
    def id(self) -> int: ...

class Status:

    @property
    def version(self) -> str: ...
    @property
    def bytes_read(self) -> int: ...
    @property
    def bytes_written(self) -> int: ...
    @property
    def bytes_read_rate(self) -> float: ...
    @property
    def bytes_written_rate(self) -> float: ...
    @property
    def rpcs_executed(self) -> int: ...
    @property
    def rpc_rate(self) -> float: ...
    @property
    def one_rpc_per_update(self) -> bool: ...
    @property
    def max_time_per_update(self) -> int: ...
    @property
    def adaptive_rate_control(self) -> bool: ...
    @property
    def blocking_recv(self) -> bool: ...
    @property
    def recv_timeout(self) -> int: ...
    @property
    def time_per_rpc_update(self) -> float: ...
    @property
    def poll_time_per_rpc_update(self) -> float: ...
    @property
    def exec_time_per_rpc_update(self) -> float: ...
    @property
    def stream_rpcs(self) -> int: ...
    @property
    def stream_rpcs_executed(self) -> int: ...
    @property
    def stream_rpc_rate(self) -> float: ...
    @property
    def time_per_stream_update(self) -> float: ...


class TypeBase:
    def __init__(self, protobuf_type: Any, python_type: Any, string: Any) -> None: ...
    @property
    def protobuf_type(self): ...
    @property
    def python_type(self): ...

class ValueType(TypeBase):
    def __init__(self, protobuf_type: Any) -> None: ...

class ClassType(TypeBase):
    def __init__(self, protobuf_type: Any, doc: Any) -> None: ...

class EnumerationType(TypeBase):
    def __init__(self, protobuf_type: Any, doc: Any) -> None: ...
    def set_values(self, values: Any) -> None: ...

class TupleType(TypeBase):
    value_types: Any = ...
    def __init__(self, protobuf_type: Any, types: Any) -> None: ...

class ListType(TypeBase):
    value_type: Any = ...
    def __init__(self, protobuf_type: Any, types: Any) -> None: ...

class SetType(TypeBase):
    value_type: Any = ...
    def __init__(self, protobuf_type: Any, types: Any) -> None: ...

class DictionaryType(TypeBase):
    key_type: Any = ...
    value_type: Any = ...
    def __init__(self, protobuf_type: Any, types: Any) -> None: ...

class MessageType(TypeBase):
    def __init__(self, protobuf_type: Any) -> None: ...

class DynamicType: ...

class ClassBase(DynamicType):
    def __init__(self, object_id: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __lt__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...

class DefaultArgument:
    def __init__(self, value: Any) -> None: ...
